@model LanguageNew.ViewModels.QuestionViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_AdminDashBoard.cshtml";
    List<SelectListItem> list = new List<SelectListItem>();
    list.Add(new SelectListItem() { Text = "Option1", Value = "1" });
    list.Add(new SelectListItem() { Text = "Option2", Value = "2" });
    list.Add(new SelectListItem() { Text = "Option3", Value = "3" });
    list.Add(new SelectListItem() { Text = "Option4", Value = "4" });
}
<style>
    textarea {
        max-width: 100%;
        max-height: 300px;
        min-height: 70px;
        min-width: 70%;
    }

    input {
        max-width: 100%;
    }
</style>
<div class="title-block">
    <h3 class="title"> Create </h3>
</div>

@using (Html.BeginForm("Create", "Question", FormMethod.Post, new { enctype = "multipart/form-data", @autocomplete = "off" }))
{
    <div class="form-horizontal">
        <div class="form-group">
            @Html.LabelFor(x => x.Question, new { @class = "control-label col-md-2 " })
            <div class="col-md-10">
                @Html.TextAreaFor(x => x.Question, new { @class = "form-control", @required = "True" })
                @Html.ValidationMessageFor(x => x.Question)
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(x => x.Option1, new { @class = "control-label col-md-offset-1 col-md-1" })
                <div class="col-md-8">
                    @Html.TextBoxFor(x => x.Option1, new { @class = "form-control", @required = "True" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(x => x.Option2, new { @class = "control-label col-md-1" })
                <div class="col-md-8">
                    @Html.TextBoxFor(x => x.Option2, new { @class = "form-control", @required = "True" })
                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-md-6">
                @Html.LabelFor(x => x.Option3, new { @class = "control-label col-md-offset-1 col-md-1" })
                <div class="col-md-8">
                    @Html.TextBoxFor(x => x.Option3, new { @class = "form-control", @required = "True" })
                </div>
            </div>
            <div class="col-md-6">
                @Html.LabelFor(x => x.Option3, new { @class = "control-label col-md-1" })
                <div class="col-md-8">
                    @Html.TextBoxFor(x => x.Option3, new { @class = "form-control", @required = "True" })
                </div>
            </div>
        </div>
        <div class="form-group">
            @Html.LabelFor(x => x.Answer, new { @class = "control-label col-md-2" })
            <div class="col-md-4">
                @Html.DropDownListFor(x => x.Answer, list, "--Select Answer--", new { @class = "form-control", @required = "True" })
            </div>
            @Html.Label("Browse", new { @class = "control-label col-md-1" })
            <div class="col-md-5">
                <input type="file" id="browse" name="image" accept="image/*" onchange="readURL(this)" />
                
            </div>
        </div>
        <div class="form-group">
            <div class="col-md-offset-2 col-md-6">
                <div class="col-md-1" id="divImg">
                    <img src="" id="Photo" alt="Question Preview" class="img img-rounded" style="max-width: 200px;" />
                </div>
            </div>
        </div>
        <div class="col-md-offset-2 col-md-10">
            <input type="submit" class="btn btn-success" value="Submit" />
            <input type="reset" class="btn btn-danger" value="Reset" />
        </div>
    </div>
}
@section scripts{
    <script>
        var yts;
        $(document).ready(function () {

            $("#divImg").hover(
                //Mouse in
              function () {
                  if (!$('#Photo').attr('src') == '')
                      $(this).append($('<span class="btnX" id="btnImgDis" onClick="removeImage();" style="color:red;">X</span>'));
              },
              //mouse out
              function () {
                  $(this).find("span:last").remove();
              });
        });

        function removeImage() {
            $('#Photo').attr('src', '');
            $('#image').val('');
            $('#browse').val('');

        }
        function readURL(input) {

            if (input.files && input.files[0]) {
                var reader = new FileReader();

                reader.onload = function (e) {
                    //var elem = document.getElementById('Photo').src;
                    //elem.src = e.target.result;
                    yts = e.target.result;
                   // $('#Photo').attr('src', e.target.result);

                    document.getElementById('Photo').src= yts;
                    //fetch(yts)
                    //.then(function (response) {
                    //    return response.blob();
                    //})
                    //.then(function (myblob) {
                    //    var bb = myblob;
                    //
                    //})
                    //fetch(yts).then(function (response) {
                    //    console.log(response.blob());
                    //});
                   // debugger;
                    document.getElementById('image').value = yts;
                    //if (yts.toString().includes('base64')) {
                    //   var z= yts.toString().lastIndexOf('base64');
                    //   var x = yts.toString().substring(z + ('base64,').length, yts.toString().length);
                    //   document.getElementById('image').value = x;
                    //}

                }
                reader.readAsDataURL(input.files[0]);
            }
            else
            {
                document.getElementById('Photo').src = "#";
            }

        }

    </script>
}


